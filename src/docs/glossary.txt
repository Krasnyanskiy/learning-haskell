
* гомогенный (список)

    Все элементы (списка) должны принадлежать к одному типу;
    длина списка не фиксирована и не известна компилятору


* гетерогенный (кортеж)

    Тип элементов не должен быть одинаковым, а длина
    (кортежа) фиксирована и о ней знает компилятор


* импорты

    Импорт означает, что в наш текущий скоуп мы ипортирует,
    например, методы из скоупа какого-нибудь класса-типа.
    Пример:

        import Data.Char (toUpper, toLower)

    Здесь мы импортируем функцию toUpper и toLower из класс-типа
    Char в наш скоуп


* конструкторы

    Есть два вида конструкторов: конструкторы данных и конструкторы типов.

    В конструкторы типов мы передаем тип:

        data Maybe a = Nothing | Just a

    В конструктор же данных мы передает уже не тип, а данные:

        let maybe = (Just 5)

    Пример:

      	bar :: Bool -> Int -> Maybe Bool
      	bar b n
      		| n `mod` 2 == 0 = (Just b)
      		| otherwise = Nothing

    (Just b)     - конструктор данных, где b это значение True/False
    (Maybe Bool) - конструктор типа Maybe